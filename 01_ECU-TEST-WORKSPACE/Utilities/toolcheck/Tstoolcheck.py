# -*- coding: utf-8 -*-

import res
from tts.testExecution.api.UserUtility import TsUserUtility




class Tstoolcheck(TsUserUtility):
    """
    UserUtility class template generated by tracetronic UtilityWizard.
    """

    ID = '6d68ebbd-96cc-11ef-aae8-38d54714d0ed'
    NAME = _(u'toolcheck')
    DESCRIPTION = u''

    SERIALIZE = {}
    """
    Specification dictionary of the teststep data that are serialized in XML-files.
    e.g. SERIALIZE = {'varName': ('varAlias', 'typeAlias', 'defaultValue')}
    """


    def UtilityInit(self):
        """
        Overwrite for initialization of your utility.
        This methode is called, when creating an instance of this class.
        """
        pass

    #Inherited from TsUtiliyor TestStep, overridden for documentation purpurse

    def UtilityReport(self, reportEngine, reportDataObject):
        """
        Overwrite this methode to you have influence, on how the results of your utility looks
        like in the report.
        @type reportItem: L{ReportItem}
        @param reportItem: Data to report should be written in this object.
        @type reportDataObject: L{RdoUserUtility}
        @param reportDataObject: Runtime data are kept in this object.

        """
        reportItem = reportEngine.PReportItem
        reportItem.PInfo = u'Info'
        reportItem.PLabel = u'Custom Utility Label'

        table = reportEngine.CreateTableEntity()
        table.SetValue(0, 0, u'Column Title')
        table.SetValue(1, 0, u'Value 1')
        table.SetValue(0, 1, u'Another Column')
        table.SetValue(1, 1, u'Value 2')
        table.Insert(reportEngine.PDbCursor)

        reportEngine.AddEvaluationEntity(reportDataObject.PResultObject)

    def GetUtilityColumnText(self, column):
        """
        Overwrite to fill the columns in testcase editor.
        @type column: int
        @param column: The column number for which the content is queried
        @rtype: str
        @return: Column text.
        """
        return u""

    def GetDialog(self):
        """
        Overwrite to return the configuration dialog of your utility.
        The dialog should set the teststep data.
        @rtype: wx.Dialog, None
        """
        from .Dlgtoolcheck import Dlgtoolcheck
        return Dlgtoolcheck(None, self)

    def GetUsedVariableNames(self):
        """
        Overwrite to specify the used variable names.
        @rtype: list
        @return: List of VariableNames used by this test step.
        """
        return []

    def PreProcess(self, testEngine):
        """
        Overwrite to implement pre execution behavior.
        This methode is called before running the testcase.
        """
        pass

    def OnRun(self, reportDataObject):
        """
        Overwrite to implement execution behavior. This methode is called during the execution of the testcase.
        If there are calculations, that are not necessary to be calculated in
        this methode, put them in to the pre- or post process. That gives the
        real process more performance to do time-critical operations well.
        @type reportDataObject: L{RdoUserUtility}
        @param reportDataObject: ReportDataObject to store report datas.
        """
        pass

    def PostProcess(self, testEngine):
        """
        Overwrite to implement post execution behavior.
        This methode is called after the testcase is completed.
        """
        pass

     ##Add your required functions here



    @staticmethod
    def GetBitmap():
        """
         Return the utility-icon.
         Please don't edit.
        """
        return res.GetBitmap("utility", "general")

